// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-redis/inferfaces"
	"github.com/ONSdigital/dp-sessions-api/session"
	"sync"
)

var (
	lockClientManagerMockSet sync.RWMutex
)

// Ensure, that ClientManagerMock does implement ClientManager.
// If this is not the case, regenerate this file with moq.
var _ inferfaces.ClientManager = &ClientManagerMock{}

// ClientManagerMock is a mock implementation of inferfaces.ClientManager.
//
//     func TestSomethingThatUsesClientManager(t *testing.T) {
//
//         // make and configure a mocked inferfaces.ClientManager
//         mockedClientManager := &ClientManagerMock{
//             SetFunc: func(s *session.Session) error {
// 	               panic("mock out the Set method")
//             },
//         }
//
//         // use mockedClientManager in code that requires inferfaces.ClientManager
//         // and then make assertions.
//
//     }
type ClientManagerMock struct {
	// SetFunc mocks the Set method.
	SetFunc func(s *session.Session) error

	// calls tracks calls to the methods.
	calls struct {
		// Set holds details about calls to the Set method.
		Set []struct {
			// S is the s argument value.
			S *session.Session
		}
	}
}

// Set calls SetFunc.
func (mock *ClientManagerMock) Set(s *session.Session) error {
	if mock.SetFunc == nil {
		panic("ClientManagerMock.SetFunc: method is nil but ClientManager.Set was just called")
	}
	callInfo := struct {
		S *session.Session
	}{
		S: s,
	}
	lockClientManagerMockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	lockClientManagerMockSet.Unlock()
	return mock.SetFunc(s)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//     len(mockedClientManager.SetCalls())
func (mock *ClientManagerMock) SetCalls() []struct {
	S *session.Session
} {
	var calls []struct {
		S *session.Session
	}
	lockClientManagerMockSet.RLock()
	calls = mock.calls.Set
	lockClientManagerMockSet.RUnlock()
	return calls
}
