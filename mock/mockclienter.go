// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-redis"
	"sync"
	"time"
)

var (
	lockClienterMockPing sync.RWMutex
	lockClienterMockSet  sync.RWMutex
)

// Ensure, that ClienterMock does implement Clienter.
// If this is not the case, regenerate this file with moq.
var _ redis.Clienter = &ClienterMock{}

// ClienterMock is a mock implementation of redis.Clienter.
//
//     func TestSomethingThatUsesClienter(t *testing.T) {
//
//         // make and configure a mocked redis.Clienter
//         mockedClienter := &ClienterMock{
//             PingFunc: func() redis.Resulter {
// 	               panic("mock out the Ping method")
//             },
//             SetFunc: func(in1 string, in2 string, in3 time.Duration) redis.Resulter {
// 	               panic("mock out the Set method")
//             },
//         }
//
//         // use mockedClienter in code that requires redis.Clienter
//         // and then make assertions.
//
//     }
type ClienterMock struct {
	// PingFunc mocks the Ping method.
	PingFunc func() redis.Resulter

	// SetFunc mocks the Set method.
	SetFunc func(in1 string, in2 string, in3 time.Duration) redis.Resulter

	// calls tracks calls to the methods.
	calls struct {
		// Ping holds details about calls to the Ping method.
		Ping []struct {
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// In1 is the in1 argument value.
			In1 string
			// In2 is the in2 argument value.
			In2 string
			// In3 is the in3 argument value.
			In3 time.Duration
		}
	}
}

// Ping calls PingFunc.
func (mock *ClienterMock) Ping() redis.Resulter {
	if mock.PingFunc == nil {
		panic("ClienterMock.PingFunc: method is nil but Clienter.Ping was just called")
	}
	callInfo := struct {
	}{}
	lockClienterMockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	lockClienterMockPing.Unlock()
	return mock.PingFunc()
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//     len(mockedClienter.PingCalls())
func (mock *ClienterMock) PingCalls() []struct {
} {
	var calls []struct {
	}
	lockClienterMockPing.RLock()
	calls = mock.calls.Ping
	lockClienterMockPing.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *ClienterMock) Set(in1 string, in2 string, in3 time.Duration) redis.Resulter {
	if mock.SetFunc == nil {
		panic("ClienterMock.SetFunc: method is nil but Clienter.Set was just called")
	}
	callInfo := struct {
		In1 string
		In2 string
		In3 time.Duration
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockClienterMockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	lockClienterMockSet.Unlock()
	return mock.SetFunc(in1, in2, in3)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//     len(mockedClienter.SetCalls())
func (mock *ClienterMock) SetCalls() []struct {
	In1 string
	In2 string
	In3 time.Duration
} {
	var calls []struct {
		In1 string
		In2 string
		In3 time.Duration
	}
	lockClienterMockSet.RLock()
	calls = mock.calls.Set
	lockClienterMockSet.RUnlock()
	return calls
}
